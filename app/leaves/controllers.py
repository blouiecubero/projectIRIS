# controllers / URL Mapping
# URL Mapping

from flask import Blueprint, render_template, request, redirect, url_for, g, session

from flask.ext.login import current_user
from app.database import db_session, Base, init_db
from app.users.models import User, UserStatistics
from app.leaves.forms import datePicking
from app.filebase.helpers import Store_Users
# from forms import signIn, datePicking, dummy
# from app import app
# from models import db, User, UserStatistics, Dummy


Leaves = Blueprint('Leaves', __name__,)
store_user = Store_Users()

@Leaves.route('/leaves', methods=['GET', 'POST'])
def leaves():
	form = datePicking() # datePicking class
	g.user = current_user
	dbQuery = UserStatistics.query.filter_by(userId = g.user.id).first() # get current_user ID
	all_users = User.query.all()
	
	userQuery = store_user.check_if_none() 
	userQuery_id = User.query.filter_by(username = userQuery).first() # get ID
	
	statQuery = UserStatistics.query.filter_by(userId = userQuery_id.id).first() # get statistics

	# Output leave dates 
	if statQuery.slDates is not None:
		slQuery = statQuery.slDates.split(';')
		slSummary = ', '.join(slQuery)

	else:
		slSummary = ""

	if statQuery.vlDates is not None:
		vacationQuery = statQuery.vlDates.split(';')
		vacationSummary = ', '.join(vacationQuery)

	else:
		vacationSummary = ""
	
	if statQuery.offsetDates is not None:
		offsetQuery = statQuery.offsetDates.split(';')
		offsetSummary = ', '.join(offsetQuery)
	
	else:
		offsetSummary = ""

	# if user has applied for leave
	if request.method == 'POST':
		if request.form.get('submitButton', None) == "submitButton":
			# print request.form['applyLeave']
			numOfDays = [] # To add in their leave days

		# Get the data from the field. String xx/xx/xxxx;
			addDate = [request.form.get('sickDateField'), request.form.get('vacationDateField'), request.form.get('offsetDateField')]
			session['addDate'] = addDate
			
		# Parse the data
			for i in addDate:
				numOfDays.append(form.dateParser(i))
				
		# Put the dates of leave to list
			dateToAppend = [str(dbQuery.slDates) + str(addDate[0]), str(dbQuery.vlDates) + str(addDate[1]), str(dbQuery.offsetDates) + str(addDate[2])]

		# Add number of leaves generated by user:
			dbQuery.sl = dbQuery.sl + int(numOfDays[0])
			dbQuery.vl = dbQuery.vl + int(numOfDays[1])
			dbQuery.offset = dbQuery.offset + int(numOfDays[2])

		# Append the user-input dates:
			dbQuery.slDates = dateToAppend[0]
			dbQuery.vlDates = dateToAppend[1]
			dbQuery.offsetDates = dateToAppend[2]
			
			db_session.commit()
			return redirect(url_for('.summary'))

		elif request.form.get('chooseUser', None) == "chooseUser":			
			wcuser  = request.form.get('userDropdown')         
			store_user.store(wcuser)
        	return redirect(url_for('.leaves'))

	return render_template('leaves/leaves.html',
							user=current_user,
							form=form,
							leaveData=dbQuery,
							all_users=all_users,
							dropDownQuery = statQuery,
							slSummary=slSummary,
							vacationSummary=vacationSummary,
							offsetSummary=offsetSummary,
							) 

# ==========================================================================

@Leaves.route('/summary', methods=['GET', 'POST'])
def summary():
	form = datePicking() # datePicking class

	slSummary = session['addDate'][0].split(';')
	vacationSummary = session['addDate'][1].split(';')
	offsetSummary = session['addDate'][2].split(';')

	# del slSummary[-1], vacationSummary[-1], offsetSummary[-1],

	slSummary = ', '.join(slSummary)
	vacationSummary = ', '.join(vacationSummary)
	offsetSummary = ', '.join(offsetSummary)
	
	if request.method == 'POST':
		session.pop('addDate', None)
		return redirect(url_for('.leaves'))

	# print session['addDate']			

	# ==========================================================================

	# g.user = current_user
	# dbQuery = UserStatistics.query.filter_by(userId = g.user.id).first() # query stats of current user

	# slQuery = dbQuery.slDates.split(';')
	# vacationQuery = dbQuery.vlDates.split(';')
	# offsetQuery = dbQuery.offsetDates.split(';')

	# del slQuery[-1], vacationQuery[-1], offsetQuery[-1]

	# slSummary = ', '.join(slQuery)
	# vacationSummary = ', '.join(vacationQuery)
	# offsetSummary = ', '.join(offsetQuery)

	# if request.method == 'POST':
	# 	return redirect(url_for('.leaves'))

	# At start of rendering

	return render_template("leaves/summary.html",
						slSummary=slSummary,
						vacationSummary=vacationSummary,
						offsetSummary=offsetSummary,
						form=form,	
						user=current_user,
						)	
